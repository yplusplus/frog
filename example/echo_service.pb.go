// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo_service.proto

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	"context"
	frog "github.com/yplusplus/frog"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var E_MethodId = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         1000,
	Name:          "method_id",
	Tag:           "varint,1000,opt,name=method_id",
	Filename:      "echo_service.proto",
}

var E_MethodName = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1001,
	Name:          "method_name",
	Tag:           "bytes,1001,opt,name=method_name",
	Filename:      "echo_service.proto",
}

func init() {
	proto.RegisterExtension(E_MethodId)
	proto.RegisterExtension(E_MethodName)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Stub for EchoService service

type echoServiceStub struct {
	channel frog.RpcChannel
}

func NewEchoServiceStub(channel frog.RpcChannel) *echoServiceStub {
	return &echoServiceStub{channel}
}

func (stub *echoServiceStub) Echo(ctx context.Context, in *ProtoEchoRequest, out *ProtoEchoResponse) error {
	err := stub.Call(EchoService_ServiceDesc.Method(0), ctx, in, out)
	return err
}

func (stub *echoServiceStub) AsyncEcho(ctx context.Context, in *ProtoEchoRequest, out *ProtoEchoResponse) frog.RpcCall {
	return stub.Go(EchoService_ServiceDesc.Method(0), ctx, in, out)
}

func (stub *echoServiceStub) Echo2(ctx context.Context, in *ProtoEchoRequest, out *ProtoEchoResponse) error {
	err := stub.Call(EchoService_ServiceDesc.Method(1), ctx, in, out)
	return err
}

func (stub *echoServiceStub) AsyncEcho2(ctx context.Context, in *ProtoEchoRequest, out *ProtoEchoResponse) frog.RpcCall {
	return stub.Go(EchoService_ServiceDesc.Method(1), ctx, in, out)
}

func (stub *echoServiceStub) Call(method *frog.MethodDesc, ctx context.Context, in proto.Message, out proto.Message) error {
	call := stub.channel.Go(method, ctx, in, out)
	<-call.Done()
	return call.Error()
}

func (stub *echoServiceStub) Go(method *frog.MethodDesc, ctx context.Context, in proto.Message, out proto.Message) frog.RpcCall {
	return stub.channel.Go(method, ctx, in, out)
}

type EchoService interface {
	Echo(context.Context, *ProtoEchoRequest, *ProtoEchoResponse) error
	Echo2(context.Context, *ProtoEchoRequest, *ProtoEchoResponse) error
}

func RegisterEchoService(service EchoService, register frog.MethodsRegister) error {
	return frog.RegisterService(EchoService_ServiceDesc, service, register)
}

var (
	EchoService_ServiceDesc *frog.ServiceDesc
)

func init() {
	frog.GenerateServiceDesc(fileDescriptor1)
	EchoService_ServiceDesc = frog.ServiceDescriptor("EchoService_ServiceDesc")
}

func init() { proto.RegisterFile("echo_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4d, 0xce, 0xc8,
	0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x52,
	0x48, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x52, 0x8b,
	0x93, 0x8b, 0x32, 0x0b, 0x4a, 0xf2, 0x8b, 0xa0, 0x2a, 0xb8, 0x40, 0xba, 0x20, 0x6c, 0xa3, 0x56,
	0x46, 0x2e, 0x6e, 0xd7, 0xe4, 0x8c, 0xfc, 0x60, 0x88, 0x19, 0x42, 0x96, 0x5c, 0x2c, 0x20, 0xae,
	0x90, 0xa0, 0x5e, 0x00, 0x48, 0x1e, 0xc4, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x12,
	0x42, 0x16, 0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x55, 0xe2, 0x3a, 0x60, 0xc7, 0x78, 0xca, 0x8e,
	0x05, 0x64, 0xa0, 0x90, 0x35, 0x17, 0x2b, 0x48, 0xce, 0x88, 0x58, 0xbd, 0xdc, 0x07, 0xec, 0x98,
	0x4e, 0xd9, 0xb1, 0x82, 0xf4, 0x1a, 0x59, 0x19, 0x71, 0x71, 0xe6, 0xa6, 0x96, 0x64, 0xe4, 0xa7,
	0xc4, 0x67, 0xa6, 0x08, 0xc9, 0xe9, 0x41, 0xfc, 0xa0, 0x07, 0xf3, 0x83, 0x9e, 0x2f, 0x58, 0xce,
	0xbf, 0xa0, 0x24, 0x33, 0x3f, 0xaf, 0x58, 0xe2, 0x05, 0xbb, 0x02, 0xa3, 0x06, 0xab, 0x95, 0x09,
	0x17, 0x37, 0x54, 0x4f, 0x5e, 0x62, 0x6e, 0x2a, 0x41, 0x5d, 0x2f, 0x41, 0xba, 0x38, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x89, 0x4c, 0xfc, 0x7b, 0x34, 0x01, 0x00, 0x00,
}
